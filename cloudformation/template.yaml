AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  iot-firehose

  Sample SAM Template for iot-firehose

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20

Parameters: 
  EnvironmentName:
    Type: String
    Default: homeTempDashboard
    Description: "Environment prefixing resources, tagging resources and for importing resources from other stacks"

  GithubOAuthToken:
    Type: String
    Description: "OAuth token for Github"

  GithubBranchName:
    Type: String
    Description: "GitHub Branch name"

  GithubRepoOwner:
    Type: String
    Description: "GitHub repo owner user-name. Must be owner"

  GithubRepoName:
    Type: String
    Description: "GitHub repo name"

  BuildSpecFilePath:
    Description: Relative BuildSpec file path for build stage. For more information, see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
    Type: String
    Default: "buildspec.yml"

Resources:
  PostToFirehoseLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: post_to_firehose/
      Handler: app.handler
      Runtime: python3.7
      Environment:
        Variables:
          STREAM: !Ref DeliveryStream
      Policies: 
        - AmazonKinesisFirehoseFullAccess
      Tags:
        project: !Ref EnvironmentName
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'home/temp'

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: project
          Value: !Ref EnvironmentName

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1 # Mb
        CompressionFormat: UNCOMPRESSED
        Prefix: temperatureReadings/!{timestamp:yyyy-MM-dd}/
        ErrorOutputPrefix: temperatureReadingsErrors/!{firehose:error-output-type}/!{timestamp:yyyy-MM-dd}/
        RoleARN: !GetAtt firehoseToS3Role.Arn
        CloudWatchLoggingOptions: 
            Enabled: true
            LogGroupName: !Ref MyFirehoseLogGroup
            LogStreamName: !Ref MyFirehoseLogStream

  MyFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 1
      
  MyFirehoseLogStream:      
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref MyFirehoseLogGroup


  firehoseToS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Policies:
        - PolicyName: WritetoS3Permission
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - s3:*
                  - logs:*
                Resource:
                  - "*"

  TempDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: hometemp
        Description: All tables related to persisted tweets.

  TempTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: hometemp
      TableInput:
        Name: hometemp
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: ingest_date
            Type: string
        Parameters:
          'projection.enabled': 'true'
          'projection.ingest_date.type': 'date'
          'projection.ingest_date.range': '2021-07-01,NOW'
          'projection.ingest_date.format': 'yyyy-MM-dd'
          'projection.ingest_date.interval': '1'
          'projection.ingest_date.interval.unit': 'DAYS'
          'storage.location.template': !Sub 's3://${Bucket}/temperatureReadings/${!ingest_date}/'
        StorageDescriptor:
          Location: !Sub s3://${Bucket} 
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            Name: jq
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          BucketColumns: []
          NumberOfBuckets: 0
          Columns:
            - Name: timestamp
              Type: string
            - Name: temperature
              Type: int
            - Name: humidity
              Type: int

  ### STATIC HOSTING 

  # Bucket to host static web assets
  HostingBucket: 
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      Tags:
        - Key: project
          Value: !Sub ${EnvironmentName}

  # Identity to allow cloudFront to access our private bucket.
  CloudFrontOriginAccessIdentity: 
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref HostingBucket

  # Bucket policy that allows the aboe OAI to access the buvket.
  HostingBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HostingBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref HostingBucket
                  - '/*'
            Principal: 
              AWS: !Join
                - ''
                - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
                  - !Ref CloudFrontOriginAccessIdentity

  # CDN to front and cache website
  CloudfrontDistribution: 
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - "twitter.enpalm.se"
        DefaultCacheBehavior: 
          AllowedMethods: # Which methods to forward to S3
            - GET
            - HEAD
            - OPTIONS
          CachedMethods: # Which methods to cache responses for at cloudfront
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 60 # in seconds
          MaxTTL: 240 # in seconds
          MinTTL: 60 # in seconds
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: s3origin # Unsure what this does, but required property
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All
        Origins:
          - DomainName: !GetAtt HostingBucket.RegionalDomainName
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        IPV6Enabled: false
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:641758013508:certificate/c39e3808-3fbb-4457-80c2-f59039fbfc20
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
      Tags:
        - Key: project
          Value: !Sub ${EnvironmentName}

  ### CD PIPELINE
  # Bucket to host pipeline artifacts 
  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: project
          Value: !Ref EnvironmentName
  
  # Pipeline to orchestrate stages
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvironmentName}-cd-pipeline-github
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages: 
        - Name: Source
          Actions:
            - Name: GithubSourceAction
              OutputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GithubRepoOwner
                Repo: !Ref GithubRepoName
                Branch: !Ref GithubBranchName
                OAuthToken: !Ref GithubOAuthToken # This is written in plaintext in console. Better to use secrets manager: {{resolve:secretsmanager:MyGitHubSecret:SecretString:token}}
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref HostingBucket
                Extract: true
              RunOrder: 3
      Tags:
        - Key: project
          Value: !Ref EnvironmentName
      RestartExecutionOnUpdate: true # Automatically run pipeline after it's been updated.

  # Role used by CodePipeline
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-codepipeline-service-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: # TODO: SCOPE DOWN!!!
                  - codebuild:*
                  - s3:*
                Resource: '*'

  # Build project to use in CodePipeline Build stage
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildSpecFilePath
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL # SMALL | MEDIUM | LARGE
        Image: 'aws/codebuild/standard:3.0'
        Type: LINUX_CONTAINER
        EnvironmentVariables: # Inject env variables into codeBuild (accessible as ${Name} in the buildspec.yml)
          - Name: HOSTING_BUCKET
            Value: !Ref HostingBucket


      Tags:
        - Key: project
          Value: !Ref EnvironmentName

  # Role used bu the build project
  BuildProjectRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-codebuild-service-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: # TODO: SCOPE DOWN!!!
                  - logs:*
                  - s3:*
                Resource: '*'

  # Webhook to trigger pipeline
  GitHubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GithubOAuthToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref CodePipeline
      TargetAction: GithubSourceAction
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true

  ##################### 
  # Gen Dashboard URL #
  #####################  

  GenEmbedUrlLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ./gen_dashboard_url/GenEmbedUrl.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 10
      Description: Generates QuickSight embedded URL for application
      Tracing: Active
      Policies:
        - Version: '2012-10-17' 
          Statement:
            - Effect: "Allow"
              Action:
                - "quicksight:GetDashboardEmbedUrl"
                - "quicksight:GetAnonymousUserEmbedUrl"
              Resource: "*"
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        Root:
          Type: Api
          Properties:
            Path: /
            Method: GET
      Tags:
        project: !Ref EnvironmentName



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PostToFirehoseLambda:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt PostToFirehoseLambda.Arn
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

